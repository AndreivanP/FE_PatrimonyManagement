{"version":3,"sources":["authentication/AuthenticationService.js","Properties.js","components/patrimony_management/LoginComponent.jsx","components/patrimony_management/HeaderComponent.jsx","components/patrimony_management/FooterComponent.jsx","components/patrimony_management/LogoutComponent.jsx","components/patrimony_management/AuthenticateRoute.jsx","api/AssetDataService.js","components/patrimony_management/ListAssetComponent.jsx","components/patrimony_management/PatrimonyManagementApp.jsx","App.js","serviceWorker.js","index.js"],"names":["username","password","axios","post","token","sessionStorage","setItem","this","setupAxiosInterceptors","createJwtToken","removeItem","getItem","user","interceptors","request","use","config","isUserLoggedIn","headers","authorization","LoginComponent","props","state","hasLoginFailed","showSuccesMessage","handleChange","bind","loginClicked","event","setState","target","name","value","AuthenticationService","executeJwtAuthenticationService","then","response","registerSuccessfulLoginJwt","data","history","push","catch","className","type","onChange","onClick","Component","HeaderComponent","href","to","logout","withRouter","FooterComponent","LogoutComponent","AuthenticateRoute","get","ListAssetComponent","assets","message","assetControl","loadAssets","getLoggedInUserName","getLoggedInToken","AssetDataService","retrieveAllAssets","map","asset","key","id","initial_value","current_value","company","PatrimonyManagementApp","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.93dc43da.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { API_URL } from \"../Properties\"\n\nconst USER_NAME_SESSION_ATTRIBUTE = 'authenticatedUser'; \nconst PASSWORD_SESSION_ATTRIBUTE = 'passwordUser'; \nconst TOKEN_SESSION_ATTRIBUTE = 'tokenUser';\n\nclass AuthenticationService {   \n\n \n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })            \n    }\n\n    registerSuccessfulLoginJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE, username);                \n        sessionStorage.setItem(TOKEN_SESSION_ATTRIBUTE, token);\n        this.setupAxiosInterceptors(this.createJwtToken(token));\n    }\n\n    createJwtToken(token) {\n        return 'Bearer ' + token\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE);\n        sessionStorage.removeItem(PASSWORD_SESSION_ATTRIBUTE);\n        sessionStorage.removeItem(TOKEN_SESSION_ATTRIBUTE);\n    }\n\n    isUserLoggedIn() {        \n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE);        \n        if(user === null) {\n            return false\n        } else {\n            return true\n        }        \n    }\n\n    getLoggedInUserName() {        \n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE);        \n        if(user === null) {\n            return \"\"\n        } else {\n            return user\n        }        \n    }\n\n    getLoggedInToken() {        \n        let token = sessionStorage.getItem(TOKEN_SESSION_ATTRIBUTE);        \n        if(token === null) {\n            return \"\"\n        } else {\n            return token\n        }        \n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if(this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();","export const API_URL = 'http://localhost:8080'","import React, { Component } from 'react';\nimport AuthenticationService from '../../authentication/AuthenticationService'\n\nclass LoginComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: 'Andreivan',\n            password: '',\n            hasLoginFailed: false,\n            showSuccesMessage: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.loginClicked = this.loginClicked.bind(this);\n\n    }\n\n    handleChange(event) {\n        //console.log(this.state);\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    loginClicked() {\n        AuthenticationService.executeJwtAuthenticationService(this.state.username, this.state.password)\n            .then( (response) => {\n                AuthenticationService.registerSuccessfulLoginJwt(this.state.username, response.data.token)\n                this.props.history.push(`/dashboard`)                \n            }).catch( () => {\n                this.setState({ showSuccesMessage: false })\n                this.setState({ hasLoginFailed: true })\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"text-center\">\n                <h1 >Login</h1>\n                <div >\n                    {/* <ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}></ShowInvalidCredentials>\n                    <ShowLoginSuccesMessage showSuccesMessage={this.state.showSuccesMessage}></ShowLoginSuccesMessage> */}\n                    {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\n                    {this.state.showSuccesMessage && <div>Login Sucessful</div>}\n                    User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange}></input>\n                    Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange}></input>\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n                </div>\n            </div>\n        )\n    }\n}\n\n// function ShowInvalidCredentials(props) {    \n//     if(props.hasLoginFailed) {        \n//         return <div>Invalid Credentials</div>\n//     }\n//     return null        \n// }\n\n// function ShowLoginSuccesMessage(props) {    \n//     if(props.showSuccesMessage) {        \n//         return <div>Login Sucessful</div>\n//     }\n//     return null        \n// }\n\nexport default LoginComponent","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport AuthenticationService from '../../authentication/AuthenticationService'\nimport { withRouter } from 'react-router';\n\nclass HeaderComponent extends Component {    \n    render() {\n        let isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"https://www.linkedin.com/in/andreivansantos\" className=\"navbar-brand\">Andreivan</a></div>\n                    <ul className=\"navbar-nav\">                        \n                        {isUserLoggedIn && <li ><Link className=\"nav-link\" to=\"/dashbord\">Dashbord</Link></li>}\n                        {isUserLoggedIn && <li ><Link className=\"nav-link\" to=\"/assets\">Assets</Link></li>}                     \n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isUserLoggedIn && <li ><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n                        {isUserLoggedIn && <li ><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        );\n    }\n}\n\nexport default withRouter(HeaderComponent);","import React, { Component } from \"react\";\n\nclass FooterComponent extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                <span className=\"text-muted\">All Rights Reserved 2020 @Andreivan</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponent","import React, { Component } from \"react\";\n\nclass LogoutComponent extends Component {\n    render() {\n        return (\n            <div className=\"text-center\">\n                <h1>You are logged out</h1>\n                <div>\n                    Thank you for using our application\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LogoutComponent","import React, { Component } from \"react\";\nimport AuthenticationService from \"../../authentication/AuthenticationService\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nclass AuthenticateRoute extends Component {\n    render() {\n        if(AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props}/>\n        } else {\n            return <Redirect to=\"/login\"/>\n        }\n        \n    }\n}\n\nexport default AuthenticateRoute","import axios from \"axios\"\nimport AuthenticationService from \"../authentication/AuthenticationService\";\nimport { API_URL } from \"../Properties\"\n\nclass AssetService {\n    retrieveAllAssets(username, token) {        \n        return axios.get(`${API_URL}/users/${username}/assets`, \n            {headers: {authorization: AuthenticationService.createJwtToken(token)}});\n    }\n \n}\n\nexport default new AssetService();","import React, { Component } from \"react\";\nimport AuthenticationService from '../../authentication/AuthenticationService'\nimport AssetDataService from '../../api/AssetDataService'\n\nclass ListAssetComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            assets: [],\n            message: null,\n            assetControl: null,            \n        }\n        this.loadAssets = this.loadAssets.bind(this);       \n    }\n\n    componentDidMount() {\n        this.loadAssets();        \n    }\n\n    loadAssets() {\n        let username = AuthenticationService.getLoggedInUserName();        \n        let token = AuthenticationService.getLoggedInToken();        \n        AssetDataService.retrieveAllAssets(username, token)\n            .then(\n                response => {\n                    this.setState(\n                        {assets : response.data}                       \n                    )\n                }\n            )                \n    }\n\n    render() {        \n        return (        \n            <div className=\"text-center\">\n                <h1>List Assets</h1>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div >\n                    <table className=\"table\">\n                        <thead>\n                            <tr>                                \n                                <th>Name</th>                                \n                                <th>Initial Value</th>                                \n                                <th>Current Value</th>\n                                <th>Company</th>\n                            </tr>\n                        </thead>                        \n                        <tbody>                            \n                            {\n                                this.state.assets.map(                                    \n                                    asset =>\n                                        <tr key={asset.id}>                                            \n                                            <td>{asset.name}</td>\n                                            <td>{asset.initial_value}</td>\n                                            <td>{asset.current_value}</td>\n                                            <td>{asset.company}</td>\n                                            {/* <td>{moment(todo.targetDate).format('YYYY-MM-DD')}</td>\n                                            <td><button className=\"brn btn-success\" onClick={() => this.updateTodoClicked(todo.id)}>Update</button></td>\n                                            <td><button className=\"brn btn-warning\" onClick={() => this.deleteTodoClicked(todo.id)}>Delete</button></td> */}\n                                        </tr>                                        \n                                )\n                            }                            \n                        </tbody>\n                    </table>\n                    <div className=\"text-center\">\n                        {/* <button className=\"btn btn-success\" onClick={this.addTodoClicked}>Add New Todo</button> */}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListAssetComponent","import LoginComponent from \"./LoginComponent\";\nimport React, { Component } from 'react'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport HeaderComponent from './HeaderComponent'\nimport FooterComponent from './FooterComponent';\nimport LogoutComponent from './LogoutComponent'\nimport AuthenticatedRoute from './AuthenticateRoute'\nimport ListAssetComponent from './ListAssetComponent'\n\nclass PatrimonyManagementApp extends Component {\n    render() {\n        return (\n            <div className=\"PatrimonyManagementApp\">\n                <Router>\n                <>\n                    <HeaderComponent/>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent}/>\n                            <Route path=\"/login\" component={LoginComponent}/>\n                            <AuthenticatedRoute path=\"/assets/\" component={ListAssetComponent}/>\n                            <AuthenticatedRoute path=\"/logout/\" component={LogoutComponent}/>    \n                        </Switch>\n                    <FooterComponent/>    \n                </>\n                </Router>\n            </div>\n        )\n    }\n}\n\nexport default PatrimonyManagementApp","import React from 'react';\nimport PatrimonyManagementApp from './components/patrimony_management/PatrimonyManagementApp'\nimport './App.css';\nimport './bootstrap.css';\n\nfunction App() {\n  return (\n    <PatrimonyManagementApp/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}