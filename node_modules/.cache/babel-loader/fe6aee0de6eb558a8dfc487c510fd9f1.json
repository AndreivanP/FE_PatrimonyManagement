{"ast":null,"code":"var _jsxFileName = \"/Users/Andreivan/git_study/FE_PatrimonyManagement/patrimony-management/src/components/patrimony_management/FinancialComponent.jsx\";\nimport React, { Component } from \"react\";\nimport AuthenticationService from '../../authentication/AuthenticationService';\nimport AssetDataService from '../../api/AssetDataService';\nimport AssetControlDataService from \"../../api/AssetControlDataService\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nlet username = AuthenticationService.getLoggedInUserName();\nlet token = AuthenticationService.getLoggedInToken();\n\nclass ListAssetComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: '',\n      variableIncomeTotal: '',\n      totalValueToBeInvested: ''\n    };\n  }\n\n  componentDidMount() {\n    AssetDataService.getCurrentTotal(username, token).then(response => this.setState({\n      total: response.data.current_total,\n      variableIncomeTotal: response.data.variable_income_total\n    }));\n  }\n\n  calcVariableIncome(value) {\n    let tempVariableInc = (this.state.total + value) / 100 * 20;\n    return this.state.variableIncomeTotal - tempVariableInc;\n  }\n\n  calcFixedIncome(value) {\n    return value - this.calcVariableIncome(value);\n  }\n\n  render() {\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'BRL',\n      minimumFractionDigits: 2\n    });\n    let {\n      total,\n      variableIncomeTotal,\n      totalValueToBeInvested\n    } = this.state;\n    total = formatter.format(total);\n    variableIncomeTotal = formatter.format(variableIncomeTotal);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"asset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        total,\n        variableIncomeTotal,\n        totalValueToBeInvested\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }\n    }, props => /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 23\n      }\n    }, \"Total Patrimony:\"), /*#__PURE__*/React.createElement(Field, {\n      className: \"readOnlyField\",\n      type: \"text\",\n      name: \"total\",\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 23\n      }\n    }, \"Variable Income Total:\"), /*#__PURE__*/React.createElement(Field, {\n      className: \"readOnlyField\",\n      type: \"text\",\n      name: \"variableIncomeTotal\",\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 23\n      }\n    }, \"Value to be Invested:\"), /*#__PURE__*/React.createElement(Field, {\n      className: \"fieldCategA\",\n      type: \"text\",\n      name: \"valueToBeInvested\",\n      value: props.values.valueToBeInvested,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 23\n      }\n    }, \"You Should Invest in Variable Income:\"), /*#__PURE__*/React.createElement(Field, {\n      className: \"readOnlyField\",\n      type: \"text\",\n      name: \"investVarInc\",\n      value: formatter.format(this.calcVariableIncome(props.values.valueToBeInvested)),\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }\n    }, \"You Should Invest in Fixed Income:\"), /*#__PURE__*/React.createElement(Field, {\n      className: \"readOnlyField\",\n      type: \"text\",\n      name: \"investFixInc\",\n      value: formatter.format(this.calcFixedIncome(props.values.valueToBeInvested)),\n      readOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 23\n      }\n    }))))));\n  }\n\n}\n\nexport default ListAssetComponent;","map":{"version":3,"sources":["/Users/Andreivan/git_study/FE_PatrimonyManagement/patrimony-management/src/components/patrimony_management/FinancialComponent.jsx"],"names":["React","Component","AuthenticationService","AssetDataService","AssetControlDataService","Formik","Form","Field","ErrorMessage","username","getLoggedInUserName","token","getLoggedInToken","ListAssetComponent","constructor","props","state","total","variableIncomeTotal","totalValueToBeInvested","componentDidMount","getCurrentTotal","then","response","setState","data","current_total","variable_income_total","calcVariableIncome","value","tempVariableInc","calcFixedIncome","render","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","format","validate","values","valueToBeInvested"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport AuthenticationService from '../../authentication/AuthenticationService'\nimport AssetDataService from '../../api/AssetDataService'\nimport AssetControlDataService from \"../../api/AssetControlDataService\"\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\n\nlet username = AuthenticationService.getLoggedInUserName();        \nlet token = AuthenticationService.getLoggedInToken(); \n\nclass ListAssetComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            total : '',\n            variableIncomeTotal : '',\n            totalValueToBeInvested : ''\n        }\n    }\n\n    componentDidMount() {\n        AssetDataService.getCurrentTotal(username, token)\n        .then(response => this.setState({\n            total : response.data.current_total,\n            variableIncomeTotal : response.data.variable_income_total,\n        }));          \n    }\n\n    calcVariableIncome(value) {\n        let tempVariableInc = (this.state.total + value) / 100 * 20;\n        return this.state.variableIncomeTotal - tempVariableInc;\n    }\n\n    calcFixedIncome(value) {\n        return value - this.calcVariableIncome(value);\n    }\n\n    render() {\n        const formatter = new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'BRL',\n            minimumFractionDigits: 2\n          })\n        let {total, variableIncomeTotal, totalValueToBeInvested} = this.state;\n        total = formatter.format(total);\n        variableIncomeTotal = formatter.format(variableIncomeTotal);\n    \n        return (\n          <div className=\"text-center\">\n            <div className=\"asset\">\n              <Formik\n                initialValues={{total, variableIncomeTotal, totalValueToBeInvested}}\n                validateOnChange={false}\n                validateOnBlur={false}\n                validate={this.validate}\n                enableReinitialize={true}\n              >\n                {(props) => (\n                  <Form>\n                    <fieldset className=\"form-group\">\n                      <label>Total Patrimony:</label>\n                      <Field className=\"readOnlyField\" type=\"text\" name=\"total\" readOnly/>\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label>Variable Income Total:</label>\n                      <Field className=\"readOnlyField\" type=\"text\" name=\"variableIncomeTotal\" readOnly/>\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label>Value to be Invested:</label>\n                      <Field className=\"fieldCategA\" type=\"text\" name=\"valueToBeInvested\" value={props.values.valueToBeInvested}/> \n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label>You Should Invest in Variable Income:</label>\n                      <Field className=\"readOnlyField\" type=\"text\" name=\"investVarInc\" value={formatter.format(this.calcVariableIncome(props.values.valueToBeInvested))} readOnly/>\n                    </fieldset>\n                    <fieldset className=\"form-group\">\n                      <label>You Should Invest in Fixed Income:</label>\n                      <Field className=\"readOnlyField\" type=\"text\" name=\"investFixInc\" value={formatter.format(this.calcFixedIncome(props.values.valueToBeInvested))} readOnly/>\n                    </fieldset>\n                  </Form>\n                ) }\n              </Formik>\n            </div>\n          </div>\n        );\n      }\n}\n\nexport default ListAssetComponent"]},"metadata":{},"sourceType":"module"}