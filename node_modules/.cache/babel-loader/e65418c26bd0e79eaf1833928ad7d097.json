{"ast":null,"code":"import axios from \"axios\";\nimport { API_URL } from \"../Properties\";\nconst USER_NAME_SESSION_ATTRIBUTE = 'authenticatedUser';\nconst PASSWORD_SESSION_ATTRIBUTE = 'passwordUser';\nconst TOKEN_SESSION_ATTRIBUTE = 'tokenUser';\n\nclass AuthenticationService {\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLoginJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE, username);\n    sessionStorage.setItem(TOKEN_SESSION_ATTRIBUTE, token);\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE);\n    sessionStorage.removeItem(PASSWORD_SESSION_ATTRIBUTE);\n    sessionStorage.removeItem(TOKEN_SESSION_ATTRIBUTE);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE);\n\n    if (user === null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE);\n\n    if (user === null) {\n      return \"\";\n    } else {\n      return user;\n    }\n  }\n\n  getLoggedInToken() {\n    let token = sessionStorage.getItem(TOKEN_SESSION_ATTRIBUTE);\n\n    if (token === null) {\n      return \"\";\n    } else {\n      return token;\n    }\n  } // setupAxiosInterceptors(token) {\n  //     axios.interceptors.request.use(\n  //         (config) => {\n  //             if(this.isUserLoggedIn()) {\n  //                 config.headers.authorization = token\n  //             }\n  //             return config\n  //         }\n  //     )\n  // }\n\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/Andreivan/git_study/FE_PatrimonyManagement/patrimony-management/src/authentication/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE","PASSWORD_SESSION_ATTRIBUTE","TOKEN_SESSION_ATTRIBUTE","AuthenticationService","executeJwtAuthenticationService","username","password","post","registerSuccessfulLoginJwt","token","sessionStorage","setItem","setupAxiosInterceptors","createJwtToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","getLoggedInToken"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,MAAMC,2BAA2B,GAAG,mBAApC;AACA,MAAMC,0BAA0B,GAAG,cAAnC;AACA,MAAMC,uBAAuB,GAAG,WAAhC;;AAEA,MAAMC,qBAAN,CAA4B;AAGxBC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOR,KAAK,CAACS,IAAN,CAAY,GAAER,OAAQ,eAAtB,EAAsC;AACzCM,MAAAA,QADyC;AAEzCC,MAAAA;AAFyC,KAAtC,CAAP;AAIH;;AAEDE,EAAAA,0BAA0B,CAACH,QAAD,EAAWI,KAAX,EAAkB;AACxCC,IAAAA,cAAc,CAACC,OAAf,CAAuBX,2BAAvB,EAAoDK,QAApD;AACAK,IAAAA,cAAc,CAACC,OAAf,CAAuBT,uBAAvB,EAAgDO,KAAhD;AACA,SAAKG,sBAAL,CAA4B,KAAKC,cAAL,CAAoBJ,KAApB,CAA5B;AACH;;AAEDI,EAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDK,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0Bf,2BAA1B;AACAU,IAAAA,cAAc,CAACK,UAAf,CAA0Bd,0BAA1B;AACAS,IAAAA,cAAc,CAACK,UAAf,CAA0Bb,uBAA1B;AACH;;AAEDc,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBlB,2BAAvB,CAAX;;AACA,QAAGiB,IAAI,KAAK,IAAZ,EAAkB;AACd,aAAO,KAAP;AACH,KAFD,MAEO;AACH,aAAO,IAAP;AACH;AACJ;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBlB,2BAAvB,CAAX;;AACA,QAAGiB,IAAI,KAAK,IAAZ,EAAkB;AACd,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAOA,IAAP;AACH;AACJ;;AAEDG,EAAAA,gBAAgB,GAAG;AACf,QAAIX,KAAK,GAAGC,cAAc,CAACQ,OAAf,CAAuBhB,uBAAvB,CAAZ;;AACA,QAAGO,KAAK,KAAK,IAAb,EAAmB;AACf,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAOA,KAAP;AACH;AACJ,GAnDuB,CAqDxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA9DwB;;AAiE5B,eAAe,IAAIN,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\nimport { API_URL } from \"../Properties\"\n\nconst USER_NAME_SESSION_ATTRIBUTE = 'authenticatedUser'; \nconst PASSWORD_SESSION_ATTRIBUTE = 'passwordUser'; \nconst TOKEN_SESSION_ATTRIBUTE = 'tokenUser';\n\nclass AuthenticationService {   \n\n \n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })            \n    }\n\n    registerSuccessfulLoginJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE, username);                \n        sessionStorage.setItem(TOKEN_SESSION_ATTRIBUTE, token);\n        this.setupAxiosInterceptors(this.createJwtToken(token));\n    }\n\n    createJwtToken(token) {\n        return 'Bearer ' + token\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE);\n        sessionStorage.removeItem(PASSWORD_SESSION_ATTRIBUTE);\n        sessionStorage.removeItem(TOKEN_SESSION_ATTRIBUTE);\n    }\n\n    isUserLoggedIn() {        \n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE);        \n        if(user === null) {\n            return false\n        } else {\n            return true\n        }        \n    }\n\n    getLoggedInUserName() {        \n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE);        \n        if(user === null) {\n            return \"\"\n        } else {\n            return user\n        }        \n    }\n\n    getLoggedInToken() {        \n        let token = sessionStorage.getItem(TOKEN_SESSION_ATTRIBUTE);        \n        if(token === null) {\n            return \"\"\n        } else {\n            return token\n        }        \n    }\n\n    // setupAxiosInterceptors(token) {\n    //     axios.interceptors.request.use(\n    //         (config) => {\n    //             if(this.isUserLoggedIn()) {\n    //                 config.headers.authorization = token\n    //             }\n    //             return config\n    //         }\n    //     )\n    // }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}